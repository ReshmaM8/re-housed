{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["# ===============================\n","# Upload the CSV file\n","# ===============================\n","from google.colab import files\n","uploaded = files.upload()\n","\n","# Load CSV\n","import pandas as pd\n","file_path = \"Shelter_utilization_2017_2024_Final.csv\"\n","df = pd.read_csv(file_path)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":76},"id":"yLdmuPJioBte","executionInfo":{"status":"ok","timestamp":1749672894511,"user_tz":240,"elapsed":91655,"user":{"displayName":"Saba Memon","userId":"10601735885344825510"}},"outputId":"888c5336-00a1-4163-e07d-100012b2f5a1"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-f32f05ad-6285-480d-9f3a-66364f1deaa6\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-f32f05ad-6285-480d-9f3a-66364f1deaa6\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving Shelter_utilization_2017_2024_Final.csv to Shelter_utilization_2017_2024_Final.csv\n"]}]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"XrbwE3qxldOz","executionInfo":{"status":"ok","timestamp":1749673755895,"user_tz":240,"elapsed":1672,"user":{"displayName":"Saba Memon","userId":"10601735885344825510"}},"outputId":"4353d707-6171-4346-e194-fd5f4f635e39"},"outputs":[{"output_type":"stream","name":"stdout","text":["âœ… Map saved as toronto_shelter_demand_map.html\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_59eaa9e9-b05c-4eea-88b4-f3dc68877041\", \"toronto_shelter_demand_map.html\", 256012)"]},"metadata":{}}],"source":["# ===============================\n","# Compute demand metrics\n","# ===============================\n","# Group by shelter and compute average occupancy and capacity\n","avg_demand_df = df.groupby('SHELTER_NAME').agg({\n","    'OCCUPANCY': 'mean',\n","    'CAPACITY': 'mean'\n","}).reset_index()\n","\n","# Clean and round\n","avg_demand_df['Avg_Occupancy'] = avg_demand_df['OCCUPANCY'].round(0).astype(int)\n","avg_demand_df['Capacity'] = avg_demand_df['CAPACITY'].round(0).astype(int)\n","avg_demand_df['Demand_Ratio'] = (avg_demand_df['Avg_Occupancy'] / avg_demand_df['Capacity']).round(2)\n","\n","# Add demand level labels\n","def classify_demand(ratio):\n","    if ratio >= 0.9:\n","        return \"High\"\n","    elif ratio >= 0.6:\n","        return \"Medium\"\n","    else:\n","        return \"Low\"\n","\n","avg_demand_df['Demand_Level'] = avg_demand_df['Demand_Ratio'].apply(classify_demand)\n","\n","# ===============================\n","# Prepare unique shelter locations\n","# ===============================\n","df_unique = df[['SHELTER_NAME', 'Latitude', 'Longitude']].drop_duplicates()\n","df_unique = df_unique.dropna(subset=['Latitude', 'Longitude'])\n","\n","# Merge demand info\n","df_unique = df_unique.merge(avg_demand_df[['SHELTER_NAME', 'Avg_Occupancy', 'Capacity', 'Demand_Ratio', 'Demand_Level']], on='SHELTER_NAME', how='left')\n","\n","# ===============================\n","# K-Means clustering on location\n","# ===============================\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.cluster import KMeans\n","\n","scaler = StandardScaler()\n","coords_scaled = scaler.fit_transform(df_unique[['Latitude', 'Longitude']])\n","\n","k = 5  # Number of clusters\n","kmeans = KMeans(n_clusters=k, random_state=42)\n","df_unique['Cluster'] = kmeans.fit_predict(coords_scaled)\n","\n","# ===============================\n","# Assign zone names by centroid\n","# ===============================\n","import numpy as np\n","\n","# Get centroids in original coordinate space\n","centroids_scaled = kmeans.cluster_centers_\n","centroids_unscaled = scaler.inverse_transform(centroids_scaled)\n","centroid_lookup = {\n","    i: {'Latitude': lat, 'Longitude': lon}\n","    for i, (lat, lon) in enumerate(centroids_unscaled)\n","}\n","\n","# Assign zone names based on centroid location\n","def assign_zone(lat, lon):\n","    if lat > 43.75 and lon < -79.42:\n","        return \"North York\"\n","    elif lat < 43.68 and lon < -79.4:\n","        return \"Downtown\"\n","    elif lat < 43.7 and lon > -79.3:\n","        return \"Scarborough\"\n","    elif lat > 43.7 and lon < -79.5:\n","        return \"Etobicoke\"\n","    else:\n","        return \"East York\"\n","\n","cluster_zone_names = {\n","    i: assign_zone(centroid['Latitude'], centroid['Longitude'])\n","    for i, centroid in centroid_lookup.items()\n","}\n","df_unique['Zone'] = df_unique['Cluster'].map(cluster_zone_names)\n","\n","# ===============================\n","# Visualize on Folium map\n","# ===============================\n","import folium\n","\n","toronto_map = folium.Map(location=[43.7, -79.4], zoom_start=11)\n","colors = ['red', 'blue', 'green', 'purple', 'orange', 'darkred', 'cadetblue', 'darkgreen']\n","\n","for _, row in df_unique.iterrows():\n","    popup_text = f\"\"\"\n","    <b>Shelter:</b> {row['SHELTER_NAME']}<br>\n","    <b>Zone:</b> {row['Zone']}<br>\n","    <b>Cluster:</b> {row['Cluster']}<br>\n","    <b>Avg Occupancy:</b> {row['Avg_Occupancy']}<br>\n","    <b>Capacity:</b> {row['Capacity']}<br>\n","    <b>Demand Ratio:</b> {row['Demand_Ratio']}<br>\n","    <b>Demand Level:</b> {row['Demand_Level']}\n","    \"\"\"\n","    folium.CircleMarker(\n","        location=(row['Latitude'], row['Longitude']),\n","        radius=6,\n","        popup=folium.Popup(popup_text, max_width=300),\n","        color=colors[row['Cluster'] % len(colors)],\n","        fill=True,\n","        fill_opacity=0.8\n","    ).add_to(toronto_map)\n","\n","# ===============================\n","# Save and download map\n","# ===============================\n","output_path = \"toronto_shelter_demand_map.html\"\n","toronto_map.save(output_path)\n","print(f\"âœ… Map saved as {output_path}\")\n","\n","# Download to local machine\n","from google.colab import files\n","files.download(output_path)\n"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"yUnZTGXWnlew","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1749673929623,"user_tz":240,"elapsed":894,"user":{"displayName":"Saba Memon","userId":"10601735885344825510"}},"outputId":"c745bcd1-da51-4d9e-9bb1-ff6a5eea93c9"},"outputs":[{"output_type":"stream","name":"stdout","text":["âœ… Map saved as toronto_demand_clusters_map.html\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_82e7164c-59f1-4fc8-bb67-bd4e7a346b63\", \"toronto_demand_clusters_map.html\", 236765)"]},"metadata":{}}],"source":["# ===============================\n","# Compute Average Demand Per Shelter\n","# ===============================\n","# Group by shelter\n","avg_demand_df = df.groupby('SHELTER_NAME').agg({\n","    'OCCUPANCY': 'mean',\n","    'CAPACITY': 'mean',\n","    'Latitude': 'first',\n","    'Longitude': 'first'\n","}).reset_index()\n","\n","# Round occupancy and capacity\n","avg_demand_df['Avg_Occupancy'] = avg_demand_df['OCCUPANCY'].round(0).astype('Int64')\n","avg_demand_df['Capacity'] = avg_demand_df['CAPACITY'].round(0).astype('Int64')\n","\n","# Compute demand ratio safely (avoid divide-by-zero)\n","avg_demand_df['Demand_Ratio'] = avg_demand_df.apply(\n","    lambda row: round(row['Avg_Occupancy'] / row['Capacity'], 2) if row['Capacity'] and row['Capacity'] > 0 else None,\n","    axis=1\n",")\n","\n","# Drop rows with missing values\n","avg_demand_df = avg_demand_df.dropna(subset=['Avg_Occupancy', 'Capacity', 'Demand_Ratio'])\n","\n","# ===============================\n","# K-Means Clustering Based on Demand\n","# ===============================\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.cluster import KMeans\n","\n","# Features to use for clustering\n","features = avg_demand_df[['Avg_Occupancy', 'Capacity', 'Demand_Ratio']]\n","scaler = StandardScaler()\n","features_scaled = scaler.fit_transform(features)\n","\n","# Apply KMeans\n","k = 4  # You can change this\n","kmeans = KMeans(n_clusters=k, random_state=42)\n","avg_demand_df['Demand_Cluster'] = kmeans.fit_predict(features_scaled)\n","\n","# ===============================\n","# Visualize on Folium Map\n","# ===============================\n","import folium\n","\n","toronto_map = folium.Map(location=[43.7, -79.4], zoom_start=11)\n","colors = ['red', 'blue', 'green', 'purple', 'orange', 'darkred', 'cadetblue', 'darkgreen']\n","\n","for _, row in avg_demand_df.iterrows():\n","    popup_text = f\"\"\"\n","    <b>Shelter:</b> {row['SHELTER_NAME']}<br>\n","    <b>Avg Occupancy:</b> {row['Avg_Occupancy']}<br>\n","    <b>Capacity:</b> {row['Capacity']}<br>\n","    <b>Demand Ratio:</b> {row['Demand_Ratio']}<br>\n","    <b>Demand Cluster:</b> {row['Demand_Cluster']}\n","    \"\"\"\n","    folium.CircleMarker(\n","        location=(row['Latitude'], row['Longitude']),\n","        radius=6,\n","        popup=folium.Popup(popup_text, max_width=300),\n","        color=colors[row['Demand_Cluster'] % len(colors)],\n","        fill=True,\n","        fill_opacity=0.8\n","    ).add_to(toronto_map)\n","\n","# ===============================\n","# Save and Download the Map\n","# ===============================\n","output_path = \"toronto_demand_clusters_map.html\"\n","toronto_map.save(output_path)\n","print(f\"âœ… Map saved as {output_path}\")\n","\n","from google.colab import files\n","files.download(output_path)\n"]},{"cell_type":"code","source":["from sklearn.metrics import silhouette_score\n","\n","score = silhouette_score(features_scaled, avg_demand_df['Demand_Cluster'])\n","print(f\"Silhouette Score: {score:.3f}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EU8QCVJJv1T6","executionInfo":{"status":"ok","timestamp":1749674866538,"user_tz":240,"elapsed":44,"user":{"displayName":"Saba Memon","userId":"10601735885344825510"}},"outputId":"f804aee8-107f-48b8-818e-b8f0e07fc239"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Silhouette Score: 0.494\n"]}]},{"cell_type":"code","source":["cluster_centers = kmeans.cluster_centers_\n","unscaled_centers = scaler.inverse_transform(cluster_centers)\n","\n","import pandas as pd\n","centroid_df = pd.DataFrame(unscaled_centers, columns=['Avg_Occupancy', 'Capacity', 'Demand_Ratio'])\n","centroid_df['Cluster'] = range(k)\n","print(centroid_df)\n"],"metadata":{"id":"geN7A-TmwFHq","executionInfo":{"status":"ok","timestamp":1749674908649,"user_tz":240,"elapsed":128,"user":{"displayName":"Saba Memon","userId":"10601735885344825510"}},"outputId":"0b87f9a6-0d46-4bdf-b163-e1a475e7fdba","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["   Avg_Occupancy    Capacity  Demand_Ratio  Cluster\n","0      28.165289   29.239669      0.959339        0\n","1     173.555556  180.777778      0.958889        1\n","2      11.800000   25.300000      0.526000        2\n","3      68.464286   70.214286      0.977857        3\n"]}]}]}